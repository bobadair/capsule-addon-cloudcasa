// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for OrginviteState.
const (
	OrginviteStateACCEPTED OrginviteState = "ACCEPTED"

	OrginviteStateDECLINED OrginviteState = "DECLINED"

	OrginviteStateEXPIRED OrginviteState = "EXPIRED"

	OrginviteStatePENDING OrginviteState = "PENDING"
)

// ACL defines model for ACL.
type ACL struct {
	Permissions *[]string `json:"permissions,omitempty"`
	Resource    string    `json:"resource"`
	ResourceIds *[]string `json:"resourceIds,omitempty"`
	Roles       *[]string `json:"roles,omitempty"`
}

// ACLs defines model for ACLs.
type ACLs struct {
	Id   *string `json:"_id,omitempty"`
	Acls *[]ACL  `json:"acls,omitempty"`
}

// ApikeyId defines model for Apikey__id.
type ApikeyId string

// BackupinstanceId defines model for Backupinstance__id.
type BackupinstanceId string

// Error defines model for Error.
type Error struct {
	Error struct {
		Code    *int    `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"_error"`
	Status string `json:"_status"`
}

// Internalacl defines model for Internalacl.
type Internalacl struct {
	Id          *string                 `json:"_id,omitempty"`
	Apikey      *ApikeyId               `json:"apikey,omitempty"`
	Org         OrgId                   `json:"org"`
	Permissions *map[string]interface{} `json:"permissions,omitempty"`
	User        *UserId                 `json:"user,omitempty"`
}

// KubeclusterId defines model for Kubecluster__id.
type KubeclusterId string

// Kubenamespace defines model for Kubenamespace.
type Kubenamespace struct {
	Id           *string                 `json:"_id,omitempty"`
	BackupinstId *BackupinstanceId       `json:"backupinst_id,omitempty"`
	CcUserEmail  *string                 `json:"cc_user_email,omitempty"`
	ClusterId    KubeclusterId           `json:"cluster_id"`
	K8sUid       *string                 `json:"k8s_uid,omitempty"`
	Name         string                  `json:"name"`
	Tags         *map[string]interface{} `json:"tags,omitempty"`
}

// ObjectstoreId defines model for Objectstore__id.
type ObjectstoreId string

// Org defines model for Org.
type Org struct {
	Id  *OrgId `json:"_id,omitempty"`
	Aws *struct {
		CustomerAwsAccountId *string `json:"customer_aws_account_id,omitempty"`
		CustomerIdentifier   string  `json:"customer_identifier"`
		ProductCode          *string `json:"product_code,omitempty"`
	} `json:"aws,omitempty"`
	BackupProvider *struct {
		Region          *string        `json:"region"`
		Type            *string        `json:"type"`
		UserObjectstore *ObjectstoreId `json:"user_objectstore,omitempty"`
	} `json:"backup_provider,omitempty"`
	BackupStorageSize    *int                    `json:"backup_storage_size,omitempty"`
	BillingAdmin         *UserId                 `json:"billing_admin,omitempty"`
	CcUserEmail          *string                 `json:"cc_user_email,omitempty"`
	Country              *string                 `json:"country,omitempty"`
	DisplayName          interface{}             `json:"display_name"`
	Name                 string                  `json:"name"`
	ProtectedStorageSize *int                    `json:"protected_storage_size,omitempty"`
	Subscription         *string                 `json:"subscription,omitempty"`
	Tags                 *map[string]interface{} `json:"tags,omitempty"`
	TimedTotalCopyData   *int                    `json:"timed_total_copy_data,omitempty"`
	TotalCopyData        *int                    `json:"total_copy_data,omitempty"`
	TotalCopyQuota       *int                    `json:"total_copy_quota,omitempty"`
	TotalSnapshotData    *int                    `json:"total_snapshot_data,omitempty"`
}

// OrgId defines model for Org__id.
type OrgId string

// Orginvite defines model for Orginvite.
type Orginvite struct {
	Id   *string `json:"_id,omitempty"`
	Acls *[]struct {
		Permissions *[]string `json:"permissions,omitempty"`
		Resource    string    `json:"resource"`
		ResourceIds *[]string `json:"resourceIds,omitempty"`
		Roles       *[]struct {
			Id   *string `json:"_id,omitempty"`
			Name *string `json:"name,omitempty"`
			Type *string `json:"type,omitempty"`
		} `json:"roles,omitempty"`
	} `json:"acls,omitempty"`
	CcUserEmail   *string                 `json:"cc_user_email,omitempty"`
	Email         string                  `json:"email"`
	ExpiresInDays *int                    `json:"expires_in_days,omitempty"`
	FirstName     string                  `json:"first_name"`
	Inviter       *string                 `json:"inviter,omitempty"`
	LastName      string                  `json:"last_name"`
	Name          string                  `json:"name"`
	Org           *OrgId                  `json:"org,omitempty"`
	State         *OrginviteState         `json:"state,omitempty"`
	Tags          *map[string]interface{} `json:"tags,omitempty"`
	Usergroups    *[]string               `json:"usergroups,omitempty"`
}

// OrginviteState defines model for Orginvite.State.
type OrginviteState string

// User defines model for User.
type User struct {
	Id          *UserId `json:"_id,omitempty"`
	CcUserEmail *string `json:"cc_user_email,omitempty"`
	Email       string  `json:"email"`
	FirstName   *string `json:"first_name,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	Mfa         *struct {
		Enabled     *bool     `json:"enabled,omitempty"`
		Multifactor *[]string `json:"multifactor,omitempty"`
	} `json:"mfa,omitempty"`
	Name            string                  `json:"name"`
	Paid            *bool                   `json:"paid,omitempty"`
	SendAlertEmails *bool                   `json:"send_alert_emails,omitempty"`
	Servicetier     *string                 `json:"servicetier,omitempty"`
	Tags            *map[string]interface{} `json:"tags,omitempty"`
}

// UserGroupACL defines model for UserGroupACL.
type UserGroupACL struct {
	Permissions *[]string `json:"permissions,omitempty"`
	Resource    string    `json:"resource"`
	ResourceIds *[]string `json:"resourceIds,omitempty"`
	Roles       *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"roles,omitempty"`
}

// UserId defines model for User__id.
type UserId string

// Usergroup defines model for Usergroup.
type Usergroup struct {
	Id          *string                 `json:"_id,omitempty"`
	Acls        *[]UserGroupACL         `json:"acls,omitempty"`
	CcUserEmail *string                 `json:"cc_user_email,omitempty"`
	Name        string                  `json:"name"`
	Tags        *map[string]interface{} `json:"tags,omitempty"`
	Users       *[]string               `json:"users,omitempty"`
}

// ResponeLinks defines model for respone_links.
type ResponeLinks struct {
	Parent *struct {
		Href  *string `json:"href,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"parent,omitempty"`
	Self *struct {
		Href  *string `json:"href,omitempty"`
		Title *string `json:"title,omitempty"`
	} `json:"self,omitempty"`
}

// ResponeMetadata defines model for respone_metadata.
type ResponeMetadata struct {
	MaxResults *int `json:"max_results,omitempty"`
	Page       *int `json:"page,omitempty"`
	Total      *int `json:"total,omitempty"`
}

// IfMatch defines model for If-Match.
type IfMatch string

// InternalaclId defines model for Internalacl__id.
type InternalaclId string

// KubenamespaceId defines model for Kubenamespace__id.
type KubenamespaceId string

// OrginviteId defines model for Orginvite__id.
type OrginviteId string

// UsergroupId defines model for Usergroup__id.
type UsergroupId string

// QueryMaxResults defines model for query__max_results.
type QueryMaxResults int

// QueryPage defines model for query__page.
type QueryPage int

// QueryProjections defines model for query__projections.
type QueryProjections string

// QuerySort defines model for query__sort.
type QuerySort string

// QueryWhere defines model for query__where.
type QueryWhere string

// Getv1internalaclsParams defines parameters for Getv1internalacls.
type Getv1internalaclsParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// DeleteInternalaclItemParams defines parameters for DeleteInternalaclItem.
type DeleteInternalaclItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PatchInternalaclItemParams defines parameters for PatchInternalaclItem.
type PatchInternalaclItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutInternalaclItemParams defines parameters for PutInternalaclItem.
type PutInternalaclItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Getv1kubenamespacesParams defines parameters for Getv1kubenamespaces.
type Getv1kubenamespacesParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// DeleteKubenamespaceItemParams defines parameters for DeleteKubenamespaceItem.
type DeleteKubenamespaceItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PatchKubenamespaceItemParams defines parameters for PatchKubenamespaceItem.
type PatchKubenamespaceItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutKubenamespaceItemParams defines parameters for PutKubenamespaceItem.
type PutKubenamespaceItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Getv1orginvitesParams defines parameters for Getv1orginvites.
type Getv1orginvitesParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// DeleteOrginviteItemParams defines parameters for DeleteOrginviteItem.
type DeleteOrginviteItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PatchOrginviteItemParams defines parameters for PatchOrginviteItem.
type PatchOrginviteItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutOrginviteItemParams defines parameters for PutOrginviteItem.
type PutOrginviteItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Getv1orgsParams defines parameters for Getv1orgs.
type Getv1orgsParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// PatchOrgItemParams defines parameters for PatchOrgItem.
type PatchOrgItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutOrgItemParams defines parameters for PutOrgItem.
type PutOrgItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Getv1usergroupsParams defines parameters for Getv1usergroups.
type Getv1usergroupsParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// DeleteUsergroupItemParams defines parameters for DeleteUsergroupItem.
type DeleteUsergroupItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PatchUsergroupItemParams defines parameters for PatchUsergroupItem.
type PatchUsergroupItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutUsergroupItemParams defines parameters for PutUsergroupItem.
type PutUsergroupItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// UpdateUserGroupACLParams defines parameters for UpdateUserGroupACL.
type UpdateUserGroupACLParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Getv1usersParams defines parameters for Getv1users.
type Getv1usersParams struct {
	// the filters query parameter (ex.: {"number": 10})
	Where *QueryWhere `json:"where,omitempty"`

	// the projections query parameter (ex.: {"name": 1})
	Projection *QueryProjections `json:"projection,omitempty"`

	// the sort query parameter (ex.: "city,-lastname")
	Sort *QuerySort `json:"sort,omitempty"`

	// the pages query parameter
	Page *QueryPage `json:"page,omitempty"`

	// the max results query parameter
	MaxResults *QueryMaxResults `json:"max_results,omitempty"`
}

// PatchUserItemParams defines parameters for PatchUserItem.
type PatchUserItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// PutUserItemParams defines parameters for PutUserItem.
type PutUserItemParams struct {
	// Current value of the _etag field
	IfMatch IfMatch `json:"If-Match"`
}

// Postv1internalaclsJSONRequestBody defines body for Postv1internalacls for application/json ContentType.
type Postv1internalaclsJSONRequestBody Internalacl

// PatchInternalaclItemJSONRequestBody defines body for PatchInternalaclItem for application/json ContentType.
type PatchInternalaclItemJSONRequestBody Internalacl

// PutInternalaclItemJSONRequestBody defines body for PutInternalaclItem for application/json ContentType.
type PutInternalaclItemJSONRequestBody Internalacl

// Postv1kubenamespacesJSONRequestBody defines body for Postv1kubenamespaces for application/json ContentType.
type Postv1kubenamespacesJSONRequestBody Kubenamespace

// PatchKubenamespaceItemJSONRequestBody defines body for PatchKubenamespaceItem for application/json ContentType.
type PatchKubenamespaceItemJSONRequestBody Kubenamespace

// PutKubenamespaceItemJSONRequestBody defines body for PutKubenamespaceItem for application/json ContentType.
type PutKubenamespaceItemJSONRequestBody Kubenamespace

// Postv1orginvitesJSONRequestBody defines body for Postv1orginvites for application/json ContentType.
type Postv1orginvitesJSONRequestBody Orginvite

// PatchOrginviteItemJSONRequestBody defines body for PatchOrginviteItem for application/json ContentType.
type PatchOrginviteItemJSONRequestBody Orginvite

// PutOrginviteItemJSONRequestBody defines body for PutOrginviteItem for application/json ContentType.
type PutOrginviteItemJSONRequestBody Orginvite

// PatchOrgItemJSONRequestBody defines body for PatchOrgItem for application/json ContentType.
type PatchOrgItemJSONRequestBody Org

// PutOrgItemJSONRequestBody defines body for PutOrgItem for application/json ContentType.
type PutOrgItemJSONRequestBody Org

// Postv1usergroupsJSONRequestBody defines body for Postv1usergroups for application/json ContentType.
type Postv1usergroupsJSONRequestBody Usergroup

// PatchUsergroupItemJSONRequestBody defines body for PatchUsergroupItem for application/json ContentType.
type PatchUsergroupItemJSONRequestBody Usergroup

// PutUsergroupItemJSONRequestBody defines body for PutUsergroupItem for application/json ContentType.
type PutUsergroupItemJSONRequestBody Usergroup

// UpdateUserGroupACLJSONRequestBody defines body for UpdateUserGroupACL for application/json ContentType.
type UpdateUserGroupACLJSONRequestBody ACLs

// PatchUserItemJSONRequestBody defines body for PatchUserItem for application/json ContentType.
type PatchUserItemJSONRequestBody User

// PutUserItemJSONRequestBody defines body for PutUserItem for application/json ContentType.
type PutUserItemJSONRequestBody User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getv1internalacls request
	Getv1internalacls(ctx context.Context, params *Getv1internalaclsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postv1internalacls request with any body
	Postv1internalaclsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Postv1internalacls(ctx context.Context, body Postv1internalaclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInternalaclItem request
	DeleteInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *DeleteInternalaclItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalaclItem request
	GetInternalaclItem(ctx context.Context, internalaclId InternalaclId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInternalaclItem request with any body
	PatchInternalaclItemWithBody(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, body PatchInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInternalaclItem request with any body
	PutInternalaclItemWithBody(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, body PutInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletev1kubenamespaces request
	Deletev1kubenamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getv1kubenamespaces request
	Getv1kubenamespaces(ctx context.Context, params *Getv1kubenamespacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postv1kubenamespaces request with any body
	Postv1kubenamespacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Postv1kubenamespaces(ctx context.Context, body Postv1kubenamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKubenamespaceItem request
	DeleteKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *DeleteKubenamespaceItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKubenamespaceItem request
	GetKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchKubenamespaceItem request with any body
	PatchKubenamespaceItemWithBody(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, body PatchKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKubenamespaceItem request with any body
	PutKubenamespaceItemWithBody(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, body PutKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletev1orginvites request
	Deletev1orginvites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getv1orginvites request
	Getv1orginvites(ctx context.Context, params *Getv1orginvitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postv1orginvites request with any body
	Postv1orginvitesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Postv1orginvites(ctx context.Context, body Postv1orginvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrginviteItem request
	DeleteOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *DeleteOrginviteItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrginviteItem request
	GetOrginviteItem(ctx context.Context, orginviteId OrginviteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrginviteItem request with any body
	PatchOrginviteItemWithBody(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, body PatchOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrginviteItem request with any body
	PutOrginviteItemWithBody(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, body PutOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getv1orgs request
	Getv1orgs(ctx context.Context, params *Getv1orgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgItem request
	GetOrgItem(ctx context.Context, orgId OrgId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgItem request with any body
	PatchOrgItemWithBody(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgItem(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, body PatchOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgItem request with any body
	PutOrgItemWithBody(ctx context.Context, orgId OrgId, params *PutOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgItem(ctx context.Context, orgId OrgId, params *PutOrgItemParams, body PutOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getv1usergroups request
	Getv1usergroups(ctx context.Context, params *Getv1usergroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postv1usergroups request with any body
	Postv1usergroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Postv1usergroups(ctx context.Context, body Postv1usergroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsergroupItem request
	DeleteUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *DeleteUsergroupItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsergroupItem request
	GetUsergroupItem(ctx context.Context, usergroupId UsergroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsergroupItem request with any body
	PatchUsergroupItemWithBody(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, body PatchUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsergroupItem request with any body
	PutUsergroupItemWithBody(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, body PutUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserGroupACL request with any body
	UpdateUserGroupACLWithBody(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserGroupACL(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, body UpdateUserGroupACLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getv1users request
	Getv1users(ctx context.Context, params *Getv1usersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserItem request
	GetUserItem(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserItem request with any body
	PatchUserItemWithBody(ctx context.Context, userId UserId, params *PatchUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserItem(ctx context.Context, userId UserId, params *PatchUserItemParams, body PatchUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserItem request with any body
	PutUserItemWithBody(ctx context.Context, userId UserId, params *PutUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserItem(ctx context.Context, userId UserId, params *PutUserItemParams, body PutUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getv1internalacls(ctx context.Context, params *Getv1internalaclsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1internalaclsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1internalaclsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1internalaclsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1internalacls(ctx context.Context, body Postv1internalaclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1internalaclsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *DeleteInternalaclItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInternalaclItemRequest(c.Server, internalaclId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalaclItem(ctx context.Context, internalaclId InternalaclId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalaclItemRequest(c.Server, internalaclId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInternalaclItemWithBody(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInternalaclItemRequestWithBody(c.Server, internalaclId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, body PatchInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInternalaclItemRequest(c.Server, internalaclId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInternalaclItemWithBody(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInternalaclItemRequestWithBody(c.Server, internalaclId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInternalaclItem(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, body PutInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInternalaclItemRequest(c.Server, internalaclId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletev1kubenamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletev1kubenamespacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getv1kubenamespaces(ctx context.Context, params *Getv1kubenamespacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1kubenamespacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1kubenamespacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1kubenamespacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1kubenamespaces(ctx context.Context, body Postv1kubenamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1kubenamespacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *DeleteKubenamespaceItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKubenamespaceItemRequest(c.Server, kubenamespaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKubenamespaceItemRequest(c.Server, kubenamespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchKubenamespaceItemWithBody(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchKubenamespaceItemRequestWithBody(c.Server, kubenamespaceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, body PatchKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchKubenamespaceItemRequest(c.Server, kubenamespaceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKubenamespaceItemWithBody(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKubenamespaceItemRequestWithBody(c.Server, kubenamespaceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKubenamespaceItem(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, body PutKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKubenamespaceItemRequest(c.Server, kubenamespaceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletev1orginvites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletev1orginvitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getv1orginvites(ctx context.Context, params *Getv1orginvitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1orginvitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1orginvitesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1orginvitesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1orginvites(ctx context.Context, body Postv1orginvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1orginvitesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *DeleteOrginviteItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrginviteItemRequest(c.Server, orginviteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrginviteItem(ctx context.Context, orginviteId OrginviteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrginviteItemRequest(c.Server, orginviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrginviteItemWithBody(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrginviteItemRequestWithBody(c.Server, orginviteId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, body PatchOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrginviteItemRequest(c.Server, orginviteId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrginviteItemWithBody(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrginviteItemRequestWithBody(c.Server, orginviteId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrginviteItem(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, body PutOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrginviteItemRequest(c.Server, orginviteId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getv1orgs(ctx context.Context, params *Getv1orgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1orgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgItem(ctx context.Context, orgId OrgId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgItemRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgItemWithBody(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgItemRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgItem(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, body PatchOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgItemRequest(c.Server, orgId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgItemWithBody(ctx context.Context, orgId OrgId, params *PutOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgItemRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgItem(ctx context.Context, orgId OrgId, params *PutOrgItemParams, body PutOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgItemRequest(c.Server, orgId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getv1usergroups(ctx context.Context, params *Getv1usergroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1usergroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1usergroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1usergroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postv1usergroups(ctx context.Context, body Postv1usergroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostv1usergroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *DeleteUsergroupItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsergroupItemRequest(c.Server, usergroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsergroupItem(ctx context.Context, usergroupId UsergroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsergroupItemRequest(c.Server, usergroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsergroupItemWithBody(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsergroupItemRequestWithBody(c.Server, usergroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, body PatchUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsergroupItemRequest(c.Server, usergroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsergroupItemWithBody(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsergroupItemRequestWithBody(c.Server, usergroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsergroupItem(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, body PutUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsergroupItemRequest(c.Server, usergroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroupACLWithBody(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupACLRequestWithBody(c.Server, usergroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroupACL(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, body UpdateUserGroupACLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupACLRequest(c.Server, usergroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getv1users(ctx context.Context, params *Getv1usersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetv1usersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserItem(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserItemRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserItemWithBody(ctx context.Context, userId UserId, params *PatchUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserItemRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserItem(ctx context.Context, userId UserId, params *PatchUserItemParams, body PatchUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserItemRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserItemWithBody(ctx context.Context, userId UserId, params *PutUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserItemRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserItem(ctx context.Context, userId UserId, params *PutUserItemParams, body PutUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserItemRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetv1internalaclsRequest generates requests for Getv1internalacls
func NewGetv1internalaclsRequest(server string, params *Getv1internalaclsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostv1internalaclsRequest calls the generic Postv1internalacls builder with application/json body
func NewPostv1internalaclsRequest(server string, body Postv1internalaclsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostv1internalaclsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostv1internalaclsRequestWithBody generates requests for Postv1internalacls with any type of body
func NewPostv1internalaclsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInternalaclItemRequest generates requests for DeleteInternalaclItem
func NewDeleteInternalaclItemRequest(server string, internalaclId InternalaclId, params *DeleteInternalaclItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internalaclId", runtime.ParamLocationPath, internalaclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetInternalaclItemRequest generates requests for GetInternalaclItem
func NewGetInternalaclItemRequest(server string, internalaclId InternalaclId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internalaclId", runtime.ParamLocationPath, internalaclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInternalaclItemRequest calls the generic PatchInternalaclItem builder with application/json body
func NewPatchInternalaclItemRequest(server string, internalaclId InternalaclId, params *PatchInternalaclItemParams, body PatchInternalaclItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInternalaclItemRequestWithBody(server, internalaclId, params, "application/json", bodyReader)
}

// NewPatchInternalaclItemRequestWithBody generates requests for PatchInternalaclItem with any type of body
func NewPatchInternalaclItemRequestWithBody(server string, internalaclId InternalaclId, params *PatchInternalaclItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internalaclId", runtime.ParamLocationPath, internalaclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutInternalaclItemRequest calls the generic PutInternalaclItem builder with application/json body
func NewPutInternalaclItemRequest(server string, internalaclId InternalaclId, params *PutInternalaclItemParams, body PutInternalaclItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInternalaclItemRequestWithBody(server, internalaclId, params, "application/json", bodyReader)
}

// NewPutInternalaclItemRequestWithBody generates requests for PutInternalaclItem with any type of body
func NewPutInternalaclItemRequestWithBody(server string, internalaclId InternalaclId, params *PutInternalaclItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internalaclId", runtime.ParamLocationPath, internalaclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internalacls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewDeletev1kubenamespacesRequest generates requests for Deletev1kubenamespaces
func NewDeletev1kubenamespacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetv1kubenamespacesRequest generates requests for Getv1kubenamespaces
func NewGetv1kubenamespacesRequest(server string, params *Getv1kubenamespacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostv1kubenamespacesRequest calls the generic Postv1kubenamespaces builder with application/json body
func NewPostv1kubenamespacesRequest(server string, body Postv1kubenamespacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostv1kubenamespacesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostv1kubenamespacesRequestWithBody generates requests for Postv1kubenamespaces with any type of body
func NewPostv1kubenamespacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKubenamespaceItemRequest generates requests for DeleteKubenamespaceItem
func NewDeleteKubenamespaceItemRequest(server string, kubenamespaceId KubenamespaceId, params *DeleteKubenamespaceItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kubenamespaceId", runtime.ParamLocationPath, kubenamespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetKubenamespaceItemRequest generates requests for GetKubenamespaceItem
func NewGetKubenamespaceItemRequest(server string, kubenamespaceId KubenamespaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kubenamespaceId", runtime.ParamLocationPath, kubenamespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchKubenamespaceItemRequest calls the generic PatchKubenamespaceItem builder with application/json body
func NewPatchKubenamespaceItemRequest(server string, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, body PatchKubenamespaceItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchKubenamespaceItemRequestWithBody(server, kubenamespaceId, params, "application/json", bodyReader)
}

// NewPatchKubenamespaceItemRequestWithBody generates requests for PatchKubenamespaceItem with any type of body
func NewPatchKubenamespaceItemRequestWithBody(server string, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kubenamespaceId", runtime.ParamLocationPath, kubenamespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutKubenamespaceItemRequest calls the generic PutKubenamespaceItem builder with application/json body
func NewPutKubenamespaceItemRequest(server string, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, body PutKubenamespaceItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKubenamespaceItemRequestWithBody(server, kubenamespaceId, params, "application/json", bodyReader)
}

// NewPutKubenamespaceItemRequestWithBody generates requests for PutKubenamespaceItem with any type of body
func NewPutKubenamespaceItemRequestWithBody(server string, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kubenamespaceId", runtime.ParamLocationPath, kubenamespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubenamespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewDeletev1orginvitesRequest generates requests for Deletev1orginvites
func NewDeletev1orginvitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetv1orginvitesRequest generates requests for Getv1orginvites
func NewGetv1orginvitesRequest(server string, params *Getv1orginvitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostv1orginvitesRequest calls the generic Postv1orginvites builder with application/json body
func NewPostv1orginvitesRequest(server string, body Postv1orginvitesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostv1orginvitesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostv1orginvitesRequestWithBody generates requests for Postv1orginvites with any type of body
func NewPostv1orginvitesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrginviteItemRequest generates requests for DeleteOrginviteItem
func NewDeleteOrginviteItemRequest(server string, orginviteId OrginviteId, params *DeleteOrginviteItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orginviteId", runtime.ParamLocationPath, orginviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetOrginviteItemRequest generates requests for GetOrginviteItem
func NewGetOrginviteItemRequest(server string, orginviteId OrginviteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orginviteId", runtime.ParamLocationPath, orginviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrginviteItemRequest calls the generic PatchOrginviteItem builder with application/json body
func NewPatchOrginviteItemRequest(server string, orginviteId OrginviteId, params *PatchOrginviteItemParams, body PatchOrginviteItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrginviteItemRequestWithBody(server, orginviteId, params, "application/json", bodyReader)
}

// NewPatchOrginviteItemRequestWithBody generates requests for PatchOrginviteItem with any type of body
func NewPatchOrginviteItemRequestWithBody(server string, orginviteId OrginviteId, params *PatchOrginviteItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orginviteId", runtime.ParamLocationPath, orginviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutOrginviteItemRequest calls the generic PutOrginviteItem builder with application/json body
func NewPutOrginviteItemRequest(server string, orginviteId OrginviteId, params *PutOrginviteItemParams, body PutOrginviteItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrginviteItemRequestWithBody(server, orginviteId, params, "application/json", bodyReader)
}

// NewPutOrginviteItemRequestWithBody generates requests for PutOrginviteItem with any type of body
func NewPutOrginviteItemRequestWithBody(server string, orginviteId OrginviteId, params *PutOrginviteItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orginviteId", runtime.ParamLocationPath, orginviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orginvites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetv1orgsRequest generates requests for Getv1orgs
func NewGetv1orgsRequest(server string, params *Getv1orgsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgItemRequest generates requests for GetOrgItem
func NewGetOrgItemRequest(server string, orgId OrgId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgItemRequest calls the generic PatchOrgItem builder with application/json body
func NewPatchOrgItemRequest(server string, orgId OrgId, params *PatchOrgItemParams, body PatchOrgItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgItemRequestWithBody(server, orgId, params, "application/json", bodyReader)
}

// NewPatchOrgItemRequestWithBody generates requests for PatchOrgItem with any type of body
func NewPatchOrgItemRequestWithBody(server string, orgId OrgId, params *PatchOrgItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutOrgItemRequest calls the generic PutOrgItem builder with application/json body
func NewPutOrgItemRequest(server string, orgId OrgId, params *PutOrgItemParams, body PutOrgItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgItemRequestWithBody(server, orgId, params, "application/json", bodyReader)
}

// NewPutOrgItemRequestWithBody generates requests for PutOrgItem with any type of body
func NewPutOrgItemRequestWithBody(server string, orgId OrgId, params *PutOrgItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetv1usergroupsRequest generates requests for Getv1usergroups
func NewGetv1usergroupsRequest(server string, params *Getv1usergroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostv1usergroupsRequest calls the generic Postv1usergroups builder with application/json body
func NewPostv1usergroupsRequest(server string, body Postv1usergroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostv1usergroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostv1usergroupsRequestWithBody generates requests for Postv1usergroups with any type of body
func NewPostv1usergroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsergroupItemRequest generates requests for DeleteUsergroupItem
func NewDeleteUsergroupItemRequest(server string, usergroupId UsergroupId, params *DeleteUsergroupItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usergroupId", runtime.ParamLocationPath, usergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetUsergroupItemRequest generates requests for GetUsergroupItem
func NewGetUsergroupItemRequest(server string, usergroupId UsergroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usergroupId", runtime.ParamLocationPath, usergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsergroupItemRequest calls the generic PatchUsergroupItem builder with application/json body
func NewPatchUsergroupItemRequest(server string, usergroupId UsergroupId, params *PatchUsergroupItemParams, body PatchUsergroupItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsergroupItemRequestWithBody(server, usergroupId, params, "application/json", bodyReader)
}

// NewPatchUsergroupItemRequestWithBody generates requests for PatchUsergroupItem with any type of body
func NewPatchUsergroupItemRequestWithBody(server string, usergroupId UsergroupId, params *PatchUsergroupItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usergroupId", runtime.ParamLocationPath, usergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutUsergroupItemRequest calls the generic PutUsergroupItem builder with application/json body
func NewPutUsergroupItemRequest(server string, usergroupId UsergroupId, params *PutUsergroupItemParams, body PutUsergroupItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsergroupItemRequestWithBody(server, usergroupId, params, "application/json", bodyReader)
}

// NewPutUsergroupItemRequestWithBody generates requests for PutUsergroupItem with any type of body
func NewPutUsergroupItemRequestWithBody(server string, usergroupId UsergroupId, params *PutUsergroupItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usergroupId", runtime.ParamLocationPath, usergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewUpdateUserGroupACLRequest calls the generic UpdateUserGroupACL builder with application/json body
func NewUpdateUserGroupACLRequest(server string, usergroupId UsergroupId, params *UpdateUserGroupACLParams, body UpdateUserGroupACLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserGroupACLRequestWithBody(server, usergroupId, params, "application/json", bodyReader)
}

// NewUpdateUserGroupACLRequestWithBody generates requests for UpdateUserGroupACL with any type of body
func NewUpdateUserGroupACLRequestWithBody(server string, usergroupId UsergroupId, params *UpdateUserGroupACLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usergroupId", runtime.ParamLocationPath, usergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/usergroups/%s/action/update-acls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewGetv1usersRequest generates requests for Getv1users
func NewGetv1usersRequest(server string, params *Getv1usersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Where != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Projection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_results", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserItemRequest generates requests for GetUserItem
func NewGetUserItemRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserItemRequest calls the generic PatchUserItem builder with application/json body
func NewPatchUserItemRequest(server string, userId UserId, params *PatchUserItemParams, body PatchUserItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserItemRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewPatchUserItemRequestWithBody generates requests for PatchUserItem with any type of body
func NewPatchUserItemRequestWithBody(server string, userId UserId, params *PatchUserItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

// NewPutUserItemRequest calls the generic PutUserItem builder with application/json body
func NewPutUserItemRequest(server string, userId UserId, params *PutUserItemParams, body PutUserItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserItemRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewPutUserItemRequestWithBody generates requests for PutUserItem with any type of body
func NewPutUserItemRequestWithBody(server string, userId UserId, params *PutUserItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, params.IfMatch)
	if err != nil {
		return nil, err
	}

	req.Header.Set("If-Match", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getv1internalacls request
	Getv1internalaclsWithResponse(ctx context.Context, params *Getv1internalaclsParams, reqEditors ...RequestEditorFn) (*Getv1internalaclsResponse, error)

	// Postv1internalacls request with any body
	Postv1internalaclsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1internalaclsResponse, error)

	Postv1internalaclsWithResponse(ctx context.Context, body Postv1internalaclsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1internalaclsResponse, error)

	// DeleteInternalaclItem request
	DeleteInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *DeleteInternalaclItemParams, reqEditors ...RequestEditorFn) (*DeleteInternalaclItemResponse, error)

	// GetInternalaclItem request
	GetInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, reqEditors ...RequestEditorFn) (*GetInternalaclItemResponse, error)

	// PatchInternalaclItem request with any body
	PatchInternalaclItemWithBodyWithResponse(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInternalaclItemResponse, error)

	PatchInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, body PatchInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInternalaclItemResponse, error)

	// PutInternalaclItem request with any body
	PutInternalaclItemWithBodyWithResponse(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInternalaclItemResponse, error)

	PutInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, body PutInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInternalaclItemResponse, error)

	// Deletev1kubenamespaces request
	Deletev1kubenamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Deletev1kubenamespacesResponse, error)

	// Getv1kubenamespaces request
	Getv1kubenamespacesWithResponse(ctx context.Context, params *Getv1kubenamespacesParams, reqEditors ...RequestEditorFn) (*Getv1kubenamespacesResponse, error)

	// Postv1kubenamespaces request with any body
	Postv1kubenamespacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1kubenamespacesResponse, error)

	Postv1kubenamespacesWithResponse(ctx context.Context, body Postv1kubenamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1kubenamespacesResponse, error)

	// DeleteKubenamespaceItem request
	DeleteKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *DeleteKubenamespaceItemParams, reqEditors ...RequestEditorFn) (*DeleteKubenamespaceItemResponse, error)

	// GetKubenamespaceItem request
	GetKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, reqEditors ...RequestEditorFn) (*GetKubenamespaceItemResponse, error)

	// PatchKubenamespaceItem request with any body
	PatchKubenamespaceItemWithBodyWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchKubenamespaceItemResponse, error)

	PatchKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, body PatchKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchKubenamespaceItemResponse, error)

	// PutKubenamespaceItem request with any body
	PutKubenamespaceItemWithBodyWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKubenamespaceItemResponse, error)

	PutKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, body PutKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKubenamespaceItemResponse, error)

	// Deletev1orginvites request
	Deletev1orginvitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Deletev1orginvitesResponse, error)

	// Getv1orginvites request
	Getv1orginvitesWithResponse(ctx context.Context, params *Getv1orginvitesParams, reqEditors ...RequestEditorFn) (*Getv1orginvitesResponse, error)

	// Postv1orginvites request with any body
	Postv1orginvitesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1orginvitesResponse, error)

	Postv1orginvitesWithResponse(ctx context.Context, body Postv1orginvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1orginvitesResponse, error)

	// DeleteOrginviteItem request
	DeleteOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *DeleteOrginviteItemParams, reqEditors ...RequestEditorFn) (*DeleteOrginviteItemResponse, error)

	// GetOrginviteItem request
	GetOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, reqEditors ...RequestEditorFn) (*GetOrginviteItemResponse, error)

	// PatchOrginviteItem request with any body
	PatchOrginviteItemWithBodyWithResponse(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrginviteItemResponse, error)

	PatchOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, body PatchOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrginviteItemResponse, error)

	// PutOrginviteItem request with any body
	PutOrginviteItemWithBodyWithResponse(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrginviteItemResponse, error)

	PutOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, body PutOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrginviteItemResponse, error)

	// Getv1orgs request
	Getv1orgsWithResponse(ctx context.Context, params *Getv1orgsParams, reqEditors ...RequestEditorFn) (*Getv1orgsResponse, error)

	// GetOrgItem request
	GetOrgItemWithResponse(ctx context.Context, orgId OrgId, reqEditors ...RequestEditorFn) (*GetOrgItemResponse, error)

	// PatchOrgItem request with any body
	PatchOrgItemWithBodyWithResponse(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgItemResponse, error)

	PatchOrgItemWithResponse(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, body PatchOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgItemResponse, error)

	// PutOrgItem request with any body
	PutOrgItemWithBodyWithResponse(ctx context.Context, orgId OrgId, params *PutOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgItemResponse, error)

	PutOrgItemWithResponse(ctx context.Context, orgId OrgId, params *PutOrgItemParams, body PutOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgItemResponse, error)

	// Getv1usergroups request
	Getv1usergroupsWithResponse(ctx context.Context, params *Getv1usergroupsParams, reqEditors ...RequestEditorFn) (*Getv1usergroupsResponse, error)

	// Postv1usergroups request with any body
	Postv1usergroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1usergroupsResponse, error)

	Postv1usergroupsWithResponse(ctx context.Context, body Postv1usergroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1usergroupsResponse, error)

	// DeleteUsergroupItem request
	DeleteUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *DeleteUsergroupItemParams, reqEditors ...RequestEditorFn) (*DeleteUsergroupItemResponse, error)

	// GetUsergroupItem request
	GetUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, reqEditors ...RequestEditorFn) (*GetUsergroupItemResponse, error)

	// PatchUsergroupItem request with any body
	PatchUsergroupItemWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsergroupItemResponse, error)

	PatchUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, body PatchUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsergroupItemResponse, error)

	// PutUsergroupItem request with any body
	PutUsergroupItemWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsergroupItemResponse, error)

	PutUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, body PutUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsergroupItemResponse, error)

	// UpdateUserGroupACL request with any body
	UpdateUserGroupACLWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupACLResponse, error)

	UpdateUserGroupACLWithResponse(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, body UpdateUserGroupACLJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupACLResponse, error)

	// Getv1users request
	Getv1usersWithResponse(ctx context.Context, params *Getv1usersParams, reqEditors ...RequestEditorFn) (*Getv1usersResponse, error)

	// GetUserItem request
	GetUserItemWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserItemResponse, error)

	// PatchUserItem request with any body
	PatchUserItemWithBodyWithResponse(ctx context.Context, userId UserId, params *PatchUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserItemResponse, error)

	PatchUserItemWithResponse(ctx context.Context, userId UserId, params *PatchUserItemParams, body PatchUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserItemResponse, error)

	// PutUserItem request with any body
	PutUserItemWithBodyWithResponse(ctx context.Context, userId UserId, params *PutUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserItemResponse, error)

	PutUserItemWithResponse(ctx context.Context, userId UserId, params *PutUserItemParams, body PutUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserItemResponse, error)
}

type Getv1internalaclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Internalacl   `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1internalaclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1internalaclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postv1internalaclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Postv1internalaclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postv1internalaclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInternalaclItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteInternalaclItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInternalaclItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalaclItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Internalacl
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetInternalaclItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalaclItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInternalaclItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchInternalaclItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInternalaclItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInternalaclItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutInternalaclItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInternalaclItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletev1kubenamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Deletev1kubenamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletev1kubenamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getv1kubenamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Kubenamespace `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1kubenamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1kubenamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postv1kubenamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Postv1kubenamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postv1kubenamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKubenamespaceItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteKubenamespaceItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKubenamespaceItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKubenamespaceItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Kubenamespace
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetKubenamespaceItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKubenamespaceItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchKubenamespaceItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchKubenamespaceItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchKubenamespaceItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKubenamespaceItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutKubenamespaceItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKubenamespaceItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletev1orginvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Deletev1orginvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletev1orginvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getv1orginvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Orginvite     `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1orginvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1orginvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postv1orginvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Postv1orginvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postv1orginvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrginviteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrginviteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrginviteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrginviteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Orginvite
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetOrginviteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrginviteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrginviteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchOrginviteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrginviteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrginviteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutOrginviteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrginviteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getv1orgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Org           `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1orgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1orgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Org
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetOrgItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchOrgItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutOrgItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getv1usergroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Usergroup     `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1usergroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1usergroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postv1usergroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r Postv1usergroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postv1usergroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsergroupItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUsergroupItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsergroupItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsergroupItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Usergroup
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsergroupItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsergroupItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsergroupItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchUsergroupItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsergroupItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsergroupItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutUsergroupItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsergroupItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserGroupACLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ACLs
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateUserGroupACLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserGroupACLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getv1usersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]User          `json:"_items,omitempty"`
		Links *ResponeLinks    `json:"_links,omitempty"`
		Meta  *ResponeMetadata `json:"_meta,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r Getv1usersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getv1usersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchUserItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutUserItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getv1internalaclsWithResponse request returning *Getv1internalaclsResponse
func (c *ClientWithResponses) Getv1internalaclsWithResponse(ctx context.Context, params *Getv1internalaclsParams, reqEditors ...RequestEditorFn) (*Getv1internalaclsResponse, error) {
	rsp, err := c.Getv1internalacls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1internalaclsResponse(rsp)
}

// Postv1internalaclsWithBodyWithResponse request with arbitrary body returning *Postv1internalaclsResponse
func (c *ClientWithResponses) Postv1internalaclsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1internalaclsResponse, error) {
	rsp, err := c.Postv1internalaclsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1internalaclsResponse(rsp)
}

func (c *ClientWithResponses) Postv1internalaclsWithResponse(ctx context.Context, body Postv1internalaclsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1internalaclsResponse, error) {
	rsp, err := c.Postv1internalacls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1internalaclsResponse(rsp)
}

// DeleteInternalaclItemWithResponse request returning *DeleteInternalaclItemResponse
func (c *ClientWithResponses) DeleteInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *DeleteInternalaclItemParams, reqEditors ...RequestEditorFn) (*DeleteInternalaclItemResponse, error) {
	rsp, err := c.DeleteInternalaclItem(ctx, internalaclId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInternalaclItemResponse(rsp)
}

// GetInternalaclItemWithResponse request returning *GetInternalaclItemResponse
func (c *ClientWithResponses) GetInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, reqEditors ...RequestEditorFn) (*GetInternalaclItemResponse, error) {
	rsp, err := c.GetInternalaclItem(ctx, internalaclId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalaclItemResponse(rsp)
}

// PatchInternalaclItemWithBodyWithResponse request with arbitrary body returning *PatchInternalaclItemResponse
func (c *ClientWithResponses) PatchInternalaclItemWithBodyWithResponse(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInternalaclItemResponse, error) {
	rsp, err := c.PatchInternalaclItemWithBody(ctx, internalaclId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInternalaclItemResponse(rsp)
}

func (c *ClientWithResponses) PatchInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *PatchInternalaclItemParams, body PatchInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInternalaclItemResponse, error) {
	rsp, err := c.PatchInternalaclItem(ctx, internalaclId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInternalaclItemResponse(rsp)
}

// PutInternalaclItemWithBodyWithResponse request with arbitrary body returning *PutInternalaclItemResponse
func (c *ClientWithResponses) PutInternalaclItemWithBodyWithResponse(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInternalaclItemResponse, error) {
	rsp, err := c.PutInternalaclItemWithBody(ctx, internalaclId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInternalaclItemResponse(rsp)
}

func (c *ClientWithResponses) PutInternalaclItemWithResponse(ctx context.Context, internalaclId InternalaclId, params *PutInternalaclItemParams, body PutInternalaclItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInternalaclItemResponse, error) {
	rsp, err := c.PutInternalaclItem(ctx, internalaclId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInternalaclItemResponse(rsp)
}

// Deletev1kubenamespacesWithResponse request returning *Deletev1kubenamespacesResponse
func (c *ClientWithResponses) Deletev1kubenamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Deletev1kubenamespacesResponse, error) {
	rsp, err := c.Deletev1kubenamespaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletev1kubenamespacesResponse(rsp)
}

// Getv1kubenamespacesWithResponse request returning *Getv1kubenamespacesResponse
func (c *ClientWithResponses) Getv1kubenamespacesWithResponse(ctx context.Context, params *Getv1kubenamespacesParams, reqEditors ...RequestEditorFn) (*Getv1kubenamespacesResponse, error) {
	rsp, err := c.Getv1kubenamespaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1kubenamespacesResponse(rsp)
}

// Postv1kubenamespacesWithBodyWithResponse request with arbitrary body returning *Postv1kubenamespacesResponse
func (c *ClientWithResponses) Postv1kubenamespacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1kubenamespacesResponse, error) {
	rsp, err := c.Postv1kubenamespacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1kubenamespacesResponse(rsp)
}

func (c *ClientWithResponses) Postv1kubenamespacesWithResponse(ctx context.Context, body Postv1kubenamespacesJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1kubenamespacesResponse, error) {
	rsp, err := c.Postv1kubenamespaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1kubenamespacesResponse(rsp)
}

// DeleteKubenamespaceItemWithResponse request returning *DeleteKubenamespaceItemResponse
func (c *ClientWithResponses) DeleteKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *DeleteKubenamespaceItemParams, reqEditors ...RequestEditorFn) (*DeleteKubenamespaceItemResponse, error) {
	rsp, err := c.DeleteKubenamespaceItem(ctx, kubenamespaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKubenamespaceItemResponse(rsp)
}

// GetKubenamespaceItemWithResponse request returning *GetKubenamespaceItemResponse
func (c *ClientWithResponses) GetKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, reqEditors ...RequestEditorFn) (*GetKubenamespaceItemResponse, error) {
	rsp, err := c.GetKubenamespaceItem(ctx, kubenamespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKubenamespaceItemResponse(rsp)
}

// PatchKubenamespaceItemWithBodyWithResponse request with arbitrary body returning *PatchKubenamespaceItemResponse
func (c *ClientWithResponses) PatchKubenamespaceItemWithBodyWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchKubenamespaceItemResponse, error) {
	rsp, err := c.PatchKubenamespaceItemWithBody(ctx, kubenamespaceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchKubenamespaceItemResponse(rsp)
}

func (c *ClientWithResponses) PatchKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PatchKubenamespaceItemParams, body PatchKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchKubenamespaceItemResponse, error) {
	rsp, err := c.PatchKubenamespaceItem(ctx, kubenamespaceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchKubenamespaceItemResponse(rsp)
}

// PutKubenamespaceItemWithBodyWithResponse request with arbitrary body returning *PutKubenamespaceItemResponse
func (c *ClientWithResponses) PutKubenamespaceItemWithBodyWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKubenamespaceItemResponse, error) {
	rsp, err := c.PutKubenamespaceItemWithBody(ctx, kubenamespaceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKubenamespaceItemResponse(rsp)
}

func (c *ClientWithResponses) PutKubenamespaceItemWithResponse(ctx context.Context, kubenamespaceId KubenamespaceId, params *PutKubenamespaceItemParams, body PutKubenamespaceItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKubenamespaceItemResponse, error) {
	rsp, err := c.PutKubenamespaceItem(ctx, kubenamespaceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKubenamespaceItemResponse(rsp)
}

// Deletev1orginvitesWithResponse request returning *Deletev1orginvitesResponse
func (c *ClientWithResponses) Deletev1orginvitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Deletev1orginvitesResponse, error) {
	rsp, err := c.Deletev1orginvites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletev1orginvitesResponse(rsp)
}

// Getv1orginvitesWithResponse request returning *Getv1orginvitesResponse
func (c *ClientWithResponses) Getv1orginvitesWithResponse(ctx context.Context, params *Getv1orginvitesParams, reqEditors ...RequestEditorFn) (*Getv1orginvitesResponse, error) {
	rsp, err := c.Getv1orginvites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1orginvitesResponse(rsp)
}

// Postv1orginvitesWithBodyWithResponse request with arbitrary body returning *Postv1orginvitesResponse
func (c *ClientWithResponses) Postv1orginvitesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1orginvitesResponse, error) {
	rsp, err := c.Postv1orginvitesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1orginvitesResponse(rsp)
}

func (c *ClientWithResponses) Postv1orginvitesWithResponse(ctx context.Context, body Postv1orginvitesJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1orginvitesResponse, error) {
	rsp, err := c.Postv1orginvites(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1orginvitesResponse(rsp)
}

// DeleteOrginviteItemWithResponse request returning *DeleteOrginviteItemResponse
func (c *ClientWithResponses) DeleteOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *DeleteOrginviteItemParams, reqEditors ...RequestEditorFn) (*DeleteOrginviteItemResponse, error) {
	rsp, err := c.DeleteOrginviteItem(ctx, orginviteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrginviteItemResponse(rsp)
}

// GetOrginviteItemWithResponse request returning *GetOrginviteItemResponse
func (c *ClientWithResponses) GetOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, reqEditors ...RequestEditorFn) (*GetOrginviteItemResponse, error) {
	rsp, err := c.GetOrginviteItem(ctx, orginviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrginviteItemResponse(rsp)
}

// PatchOrginviteItemWithBodyWithResponse request with arbitrary body returning *PatchOrginviteItemResponse
func (c *ClientWithResponses) PatchOrginviteItemWithBodyWithResponse(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrginviteItemResponse, error) {
	rsp, err := c.PatchOrginviteItemWithBody(ctx, orginviteId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrginviteItemResponse(rsp)
}

func (c *ClientWithResponses) PatchOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *PatchOrginviteItemParams, body PatchOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrginviteItemResponse, error) {
	rsp, err := c.PatchOrginviteItem(ctx, orginviteId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrginviteItemResponse(rsp)
}

// PutOrginviteItemWithBodyWithResponse request with arbitrary body returning *PutOrginviteItemResponse
func (c *ClientWithResponses) PutOrginviteItemWithBodyWithResponse(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrginviteItemResponse, error) {
	rsp, err := c.PutOrginviteItemWithBody(ctx, orginviteId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrginviteItemResponse(rsp)
}

func (c *ClientWithResponses) PutOrginviteItemWithResponse(ctx context.Context, orginviteId OrginviteId, params *PutOrginviteItemParams, body PutOrginviteItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrginviteItemResponse, error) {
	rsp, err := c.PutOrginviteItem(ctx, orginviteId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrginviteItemResponse(rsp)
}

// Getv1orgsWithResponse request returning *Getv1orgsResponse
func (c *ClientWithResponses) Getv1orgsWithResponse(ctx context.Context, params *Getv1orgsParams, reqEditors ...RequestEditorFn) (*Getv1orgsResponse, error) {
	rsp, err := c.Getv1orgs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1orgsResponse(rsp)
}

// GetOrgItemWithResponse request returning *GetOrgItemResponse
func (c *ClientWithResponses) GetOrgItemWithResponse(ctx context.Context, orgId OrgId, reqEditors ...RequestEditorFn) (*GetOrgItemResponse, error) {
	rsp, err := c.GetOrgItem(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgItemResponse(rsp)
}

// PatchOrgItemWithBodyWithResponse request with arbitrary body returning *PatchOrgItemResponse
func (c *ClientWithResponses) PatchOrgItemWithBodyWithResponse(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgItemResponse, error) {
	rsp, err := c.PatchOrgItemWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgItemResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgItemWithResponse(ctx context.Context, orgId OrgId, params *PatchOrgItemParams, body PatchOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgItemResponse, error) {
	rsp, err := c.PatchOrgItem(ctx, orgId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgItemResponse(rsp)
}

// PutOrgItemWithBodyWithResponse request with arbitrary body returning *PutOrgItemResponse
func (c *ClientWithResponses) PutOrgItemWithBodyWithResponse(ctx context.Context, orgId OrgId, params *PutOrgItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgItemResponse, error) {
	rsp, err := c.PutOrgItemWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgItemResponse(rsp)
}

func (c *ClientWithResponses) PutOrgItemWithResponse(ctx context.Context, orgId OrgId, params *PutOrgItemParams, body PutOrgItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgItemResponse, error) {
	rsp, err := c.PutOrgItem(ctx, orgId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgItemResponse(rsp)
}

// Getv1usergroupsWithResponse request returning *Getv1usergroupsResponse
func (c *ClientWithResponses) Getv1usergroupsWithResponse(ctx context.Context, params *Getv1usergroupsParams, reqEditors ...RequestEditorFn) (*Getv1usergroupsResponse, error) {
	rsp, err := c.Getv1usergroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1usergroupsResponse(rsp)
}

// Postv1usergroupsWithBodyWithResponse request with arbitrary body returning *Postv1usergroupsResponse
func (c *ClientWithResponses) Postv1usergroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postv1usergroupsResponse, error) {
	rsp, err := c.Postv1usergroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1usergroupsResponse(rsp)
}

func (c *ClientWithResponses) Postv1usergroupsWithResponse(ctx context.Context, body Postv1usergroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postv1usergroupsResponse, error) {
	rsp, err := c.Postv1usergroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostv1usergroupsResponse(rsp)
}

// DeleteUsergroupItemWithResponse request returning *DeleteUsergroupItemResponse
func (c *ClientWithResponses) DeleteUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *DeleteUsergroupItemParams, reqEditors ...RequestEditorFn) (*DeleteUsergroupItemResponse, error) {
	rsp, err := c.DeleteUsergroupItem(ctx, usergroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsergroupItemResponse(rsp)
}

// GetUsergroupItemWithResponse request returning *GetUsergroupItemResponse
func (c *ClientWithResponses) GetUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, reqEditors ...RequestEditorFn) (*GetUsergroupItemResponse, error) {
	rsp, err := c.GetUsergroupItem(ctx, usergroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsergroupItemResponse(rsp)
}

// PatchUsergroupItemWithBodyWithResponse request with arbitrary body returning *PatchUsergroupItemResponse
func (c *ClientWithResponses) PatchUsergroupItemWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsergroupItemResponse, error) {
	rsp, err := c.PatchUsergroupItemWithBody(ctx, usergroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsergroupItemResponse(rsp)
}

func (c *ClientWithResponses) PatchUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *PatchUsergroupItemParams, body PatchUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsergroupItemResponse, error) {
	rsp, err := c.PatchUsergroupItem(ctx, usergroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsergroupItemResponse(rsp)
}

// PutUsergroupItemWithBodyWithResponse request with arbitrary body returning *PutUsergroupItemResponse
func (c *ClientWithResponses) PutUsergroupItemWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsergroupItemResponse, error) {
	rsp, err := c.PutUsergroupItemWithBody(ctx, usergroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsergroupItemResponse(rsp)
}

func (c *ClientWithResponses) PutUsergroupItemWithResponse(ctx context.Context, usergroupId UsergroupId, params *PutUsergroupItemParams, body PutUsergroupItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsergroupItemResponse, error) {
	rsp, err := c.PutUsergroupItem(ctx, usergroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsergroupItemResponse(rsp)
}

// UpdateUserGroupACLWithBodyWithResponse request with arbitrary body returning *UpdateUserGroupACLResponse
func (c *ClientWithResponses) UpdateUserGroupACLWithBodyWithResponse(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupACLResponse, error) {
	rsp, err := c.UpdateUserGroupACLWithBody(ctx, usergroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupACLResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserGroupACLWithResponse(ctx context.Context, usergroupId UsergroupId, params *UpdateUserGroupACLParams, body UpdateUserGroupACLJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupACLResponse, error) {
	rsp, err := c.UpdateUserGroupACL(ctx, usergroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupACLResponse(rsp)
}

// Getv1usersWithResponse request returning *Getv1usersResponse
func (c *ClientWithResponses) Getv1usersWithResponse(ctx context.Context, params *Getv1usersParams, reqEditors ...RequestEditorFn) (*Getv1usersResponse, error) {
	rsp, err := c.Getv1users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetv1usersResponse(rsp)
}

// GetUserItemWithResponse request returning *GetUserItemResponse
func (c *ClientWithResponses) GetUserItemWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserItemResponse, error) {
	rsp, err := c.GetUserItem(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserItemResponse(rsp)
}

// PatchUserItemWithBodyWithResponse request with arbitrary body returning *PatchUserItemResponse
func (c *ClientWithResponses) PatchUserItemWithBodyWithResponse(ctx context.Context, userId UserId, params *PatchUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserItemResponse, error) {
	rsp, err := c.PatchUserItemWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserItemResponse(rsp)
}

func (c *ClientWithResponses) PatchUserItemWithResponse(ctx context.Context, userId UserId, params *PatchUserItemParams, body PatchUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserItemResponse, error) {
	rsp, err := c.PatchUserItem(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserItemResponse(rsp)
}

// PutUserItemWithBodyWithResponse request with arbitrary body returning *PutUserItemResponse
func (c *ClientWithResponses) PutUserItemWithBodyWithResponse(ctx context.Context, userId UserId, params *PutUserItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserItemResponse, error) {
	rsp, err := c.PutUserItemWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserItemResponse(rsp)
}

func (c *ClientWithResponses) PutUserItemWithResponse(ctx context.Context, userId UserId, params *PutUserItemParams, body PutUserItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserItemResponse, error) {
	rsp, err := c.PutUserItem(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserItemResponse(rsp)
}

// ParseGetv1internalaclsResponse parses an HTTP response from a Getv1internalaclsWithResponse call
func ParseGetv1internalaclsResponse(rsp *http.Response) (*Getv1internalaclsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1internalaclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Internalacl   `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostv1internalaclsResponse parses an HTTP response from a Postv1internalaclsWithResponse call
func ParsePostv1internalaclsResponse(rsp *http.Response) (*Postv1internalaclsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postv1internalaclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteInternalaclItemResponse parses an HTTP response from a DeleteInternalaclItemWithResponse call
func ParseDeleteInternalaclItemResponse(rsp *http.Response) (*DeleteInternalaclItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInternalaclItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInternalaclItemResponse parses an HTTP response from a GetInternalaclItemWithResponse call
func ParseGetInternalaclItemResponse(rsp *http.Response) (*GetInternalaclItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalaclItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Internalacl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchInternalaclItemResponse parses an HTTP response from a PatchInternalaclItemWithResponse call
func ParsePatchInternalaclItemResponse(rsp *http.Response) (*PatchInternalaclItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInternalaclItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutInternalaclItemResponse parses an HTTP response from a PutInternalaclItemWithResponse call
func ParsePutInternalaclItemResponse(rsp *http.Response) (*PutInternalaclItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInternalaclItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletev1kubenamespacesResponse parses an HTTP response from a Deletev1kubenamespacesWithResponse call
func ParseDeletev1kubenamespacesResponse(rsp *http.Response) (*Deletev1kubenamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletev1kubenamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetv1kubenamespacesResponse parses an HTTP response from a Getv1kubenamespacesWithResponse call
func ParseGetv1kubenamespacesResponse(rsp *http.Response) (*Getv1kubenamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1kubenamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Kubenamespace `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostv1kubenamespacesResponse parses an HTTP response from a Postv1kubenamespacesWithResponse call
func ParsePostv1kubenamespacesResponse(rsp *http.Response) (*Postv1kubenamespacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postv1kubenamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteKubenamespaceItemResponse parses an HTTP response from a DeleteKubenamespaceItemWithResponse call
func ParseDeleteKubenamespaceItemResponse(rsp *http.Response) (*DeleteKubenamespaceItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKubenamespaceItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetKubenamespaceItemResponse parses an HTTP response from a GetKubenamespaceItemWithResponse call
func ParseGetKubenamespaceItemResponse(rsp *http.Response) (*GetKubenamespaceItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKubenamespaceItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Kubenamespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchKubenamespaceItemResponse parses an HTTP response from a PatchKubenamespaceItemWithResponse call
func ParsePatchKubenamespaceItemResponse(rsp *http.Response) (*PatchKubenamespaceItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchKubenamespaceItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutKubenamespaceItemResponse parses an HTTP response from a PutKubenamespaceItemWithResponse call
func ParsePutKubenamespaceItemResponse(rsp *http.Response) (*PutKubenamespaceItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKubenamespaceItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletev1orginvitesResponse parses an HTTP response from a Deletev1orginvitesWithResponse call
func ParseDeletev1orginvitesResponse(rsp *http.Response) (*Deletev1orginvitesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletev1orginvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetv1orginvitesResponse parses an HTTP response from a Getv1orginvitesWithResponse call
func ParseGetv1orginvitesResponse(rsp *http.Response) (*Getv1orginvitesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1orginvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Orginvite     `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostv1orginvitesResponse parses an HTTP response from a Postv1orginvitesWithResponse call
func ParsePostv1orginvitesResponse(rsp *http.Response) (*Postv1orginvitesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postv1orginvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteOrginviteItemResponse parses an HTTP response from a DeleteOrginviteItemWithResponse call
func ParseDeleteOrginviteItemResponse(rsp *http.Response) (*DeleteOrginviteItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrginviteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrginviteItemResponse parses an HTTP response from a GetOrginviteItemWithResponse call
func ParseGetOrginviteItemResponse(rsp *http.Response) (*GetOrginviteItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrginviteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Orginvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchOrginviteItemResponse parses an HTTP response from a PatchOrginviteItemWithResponse call
func ParsePatchOrginviteItemResponse(rsp *http.Response) (*PatchOrginviteItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrginviteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOrginviteItemResponse parses an HTTP response from a PutOrginviteItemWithResponse call
func ParsePutOrginviteItemResponse(rsp *http.Response) (*PutOrginviteItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrginviteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetv1orgsResponse parses an HTTP response from a Getv1orgsWithResponse call
func ParseGetv1orgsResponse(rsp *http.Response) (*Getv1orgsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1orgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Org           `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrgItemResponse parses an HTTP response from a GetOrgItemWithResponse call
func ParseGetOrgItemResponse(rsp *http.Response) (*GetOrgItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Org
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchOrgItemResponse parses an HTTP response from a PatchOrgItemWithResponse call
func ParsePatchOrgItemResponse(rsp *http.Response) (*PatchOrgItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOrgItemResponse parses an HTTP response from a PutOrgItemWithResponse call
func ParsePutOrgItemResponse(rsp *http.Response) (*PutOrgItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetv1usergroupsResponse parses an HTTP response from a Getv1usergroupsWithResponse call
func ParseGetv1usergroupsResponse(rsp *http.Response) (*Getv1usergroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1usergroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Usergroup     `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostv1usergroupsResponse parses an HTTP response from a Postv1usergroupsWithResponse call
func ParsePostv1usergroupsResponse(rsp *http.Response) (*Postv1usergroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postv1usergroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsergroupItemResponse parses an HTTP response from a DeleteUsergroupItemWithResponse call
func ParseDeleteUsergroupItemResponse(rsp *http.Response) (*DeleteUsergroupItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsergroupItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsergroupItemResponse parses an HTTP response from a GetUsergroupItemWithResponse call
func ParseGetUsergroupItemResponse(rsp *http.Response) (*GetUsergroupItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsergroupItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Usergroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchUsergroupItemResponse parses an HTTP response from a PatchUsergroupItemWithResponse call
func ParsePatchUsergroupItemResponse(rsp *http.Response) (*PatchUsergroupItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsergroupItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUsergroupItemResponse parses an HTTP response from a PutUsergroupItemWithResponse call
func ParsePutUsergroupItemResponse(rsp *http.Response) (*PutUsergroupItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsergroupItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateUserGroupACLResponse parses an HTTP response from a UpdateUserGroupACLWithResponse call
func ParseUpdateUserGroupACLResponse(rsp *http.Response) (*UpdateUserGroupACLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserGroupACLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ACLs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetv1usersResponse parses an HTTP response from a Getv1usersWithResponse call
func ParseGetv1usersResponse(rsp *http.Response) (*Getv1usersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getv1usersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]User          `json:"_items,omitempty"`
			Links *ResponeLinks    `json:"_links,omitempty"`
			Meta  *ResponeMetadata `json:"_meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserItemResponse parses an HTTP response from a GetUserItemWithResponse call
func ParseGetUserItemResponse(rsp *http.Response) (*GetUserItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchUserItemResponse parses an HTTP response from a PatchUserItemWithResponse call
func ParsePatchUserItemResponse(rsp *http.Response) (*PatchUserItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUserItemResponse parses an HTTP response from a PutUserItemWithResponse call
func ParsePutUserItemResponse(rsp *http.Response) (*PutUserItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
